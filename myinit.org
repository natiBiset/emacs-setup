* general
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 0)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (setq load-prefer-newer t)
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (set-face-attribute 'region nil :background "#666" :foreground "#ffffff")
  ;;bracket
  (electric-pair-mode 1)
  (setq electric-pair-pairs '((?\{ . ?\}) (?\[ . ?\]) (?\( . ?\))))
#+end_src
* sudo
#+begin_src emacs-lisp
  (use-package sudo-edit)

#+end_src
* edit(copy/paste)
#+begin_src emacs-lisp
  (defun copy-line ()
    "Copy the current line."
    (interactive)
    (kill-ring-save (line-beginning-position) (line-end-position)))

  (global-set-key (kbd "C-c z") 'copy-line)
  (use-package undo-fu
    
    :config
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z")   'undo-fu-only-undo)
    (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
#+end_src
* powerline
#+begin_src emacs-lisp
  (use-package powerline
    
    :config (powerline-default-theme))
#+end_src

* try
#+begin_src emacs-lisp
 
(use-package try
  )
  
#+end_src
* which
#+begin_src emacs-lisp
(use-package which-key
  
  :config (which-key-mode))  
#+end_src
* theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
  
  :config (load-theme 'zenburn t))
  ;;   (use-package doom-themes
  ;; 
  ;; :config
  ;; ;; Global settings (defaults)
  ;; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;       doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; ;;(load-theme 'doom-one t)
  ;; ;; (load-theme 'doom-lantern t)
  ;; ;; (load-theme 'doom-tomorrow-night t)
  ;; (load-theme 'doom-tomorrow-night t)
  ;; ;; Enable flashing mode-line on errors
  ;; (doom-themes-visual-bell-config)
  ;; ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; ;; Corrects (and improves) org-mode's native fontification.
  ;; (doom-themes-org-config))
  ;; (use-package all-the-icons
  ;;   :ensure t
  ;;   )

#+end_src
* org mode
** bullets
#+begin_src emacs-lisp
  (setq org-startup-folded t)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (use-package org-superstar
  
  :config
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))

#+end_src
** states
#+begin_src emacs-lisp
  (setq org-todo-keywords
	'((sequence "SOMEDAY(s)" "TODO(t)" "SCHEDULED(p)" "IN-PROGRESS(i)"    "|" "DONE(d)" "WONT-DO(w@/!)" )
	  ))
  (setq   org-highest-priority ?A
	  org-default-priority ?B
	  org-lowest-priority ?C
	  )
    (setq org-todo-keyword-faces
      '(("TODO" . "green")
	("SOMEDAY" . "blue")
	("SCHEDULED"."yellow")
	("IN-PROGRESS" . "grey")
	("VERIFYING" . "green")
	("DONE" .  (:foreground "violet" :weight bold))
	("WONT-DO" . (:foreground "red" :weight bold))
	))

#+end_src
** agenda
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda) 
  ;; (setq org-agenda-files (directory-files-recursively "~/Documents/org" "\\.org$"))
  ;;    (setq org-agenda-files '("~/Documents/org"))
  (global-set-key (kbd "C-c l") 'org-store-link)
      ;capture
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-log-done 'time)

  (custom-set-variables
  '(org-priority-faces (quote ((65 . "tomato") (66 . "yellow") (67 . "blue")))))

#+end_src
** capture templates
#+begin_src emacs-lisp
    (setq org-capture-templates
	  '(
	("b" "bin [For general collection]"
	 entry (file+datetree "~/Document/org/baskets/collect.org")
	 "* %<%H:%M> %?"
	 :empty-lines 0)

	("a" "Anki basic"
	 entry (file+headline org-my-anki-file "Dispatch Shelf")
	 "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Basic\n:ANKI_DECK: super\n:END:\n** Front\n%?\n** Back\n%x\n")
	("C" "Anki cloze"
       entry (file+headline org-my-anki-file "Dispatch Shelf")
       "* %<%H:%M>   %^g\n:PROPERTIES:\n:ANKI_NOTE_TYPE: Cloze\n:ANKI_DECK: super\n:END:\n** Text\n%x\n** Extra\n")
	))

#+end_src
** template
#+begin_src emacs-lisp
    (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
#+end_src
* completion
** company
#+begin_src emacs-lisp
  (use-package company
    
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (global-company-mode t)
    (add-hook 'after-init-hook 'global-company-mode))
  (use-package company-box
    
    :hook (company-mode . company-box-mode))
  
#+end_src
** navigation
#+begin_src emacs-lisp
  (use-package counsel
    
    )

  (use-package swiper
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))



  (setq ivy-re-builders-alist
       '((read-file-name-internal . ivy--regex-fuzzy)
	 (t . ivy--regex-plus)))
#+end_src
* pdf
#+begin_src emacs-lisp
  (use-package pdf-tools
    
    :config
    (pdf-tools-install))

  (use-package org-noter
    
    :config)
  (use-package nov
    )
  (use-package djvu
    )

#+end_src

* magit
#+begin_src emacs-lisp
   (use-package magit
     
     :init
     (message "Loading Magit!")
     :config
     (message "Loaded Magit!")
     :bind (("C-x C-g" . magit-status)))
#+end_src
* projectile
#+begin_src emacs-lisp

  (use-package projectile
    
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))  

#+end_src
* flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    
    :init (global-flycheck-mode))

#+end_src
* imenu-list
#+begin_src emacs-lisp
  (use-package imenu-list
    )
  (global-set-key (kbd "C-'") #'imenu-list-smart-toggle)
#+end_src
* lsp mode
#+begin_src emacs-lisp
  (use-package lsp-mode
      
      :commands (lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-x l" )  ;; Or 'C-l', 's-l'
      :hook(
	    (python-mode . lsp)
	    (js2-mode . lsp)
	    )
      :config
      (lsp-enable-which-key-integration t))
  (setq lsp-file-watch-threshold 2000)
  (setq gc-cons-threshold 100000000)
  ;; (add-hook 'prog-mode-hook #'lsp)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-log-io nil)
  (use-package lsp-ui
      
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))
  (use-package lsp-treemacs
    
    :after lsp)
  (lsp-treemacs-sync-mode 1)
  (use-package lsp-ivy
    )

#+end_src
* python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    
    :hook (python-mode . (lambda()
			   (require 'lsp-pyright)
			   (lsp-deferred))))
    (use-package pyvenv
    
    :config
    (pyvenv-mode t)
    ;; Set correct Python interpreter
    (setq pyvenv-post-activate-hooks
	  (list (lambda ()
		  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
	  (list (lambda ()
		  (setq python-shell-interpreter "python3")))))
#+end_src
* js
#+begin_src emacs-lisp
    (add-hook 'prog-mode-hook #'lsp-deferred)
    (setq js-indent-level 2)
    (use-package typescript-mode
    )

  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
#+end_src
* dap
#+begin_src emacs-lisp
  (use-package dap-mode
    
    :config
    (dap-auto-configure-mode
     )
    :bind(
	  ("<f7>" . dap-step-in)
	  ("<f8>" . dap-next)
	  ("<f9>" . dap-continue)
	  ))
  (require 'dap-firefox)
  
#+end_src
* rainbow-delimiters
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
    
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    
    :config
    (setq yas-snippet-dirs '("~/Dropbox/snippets"))
    (yas-global-mode 1)
   )
#+end_src
* anki
#+begin_src emacs-lisp
  (use-package anki-editor
    
    :after org
    :bind (:map org-mode-map
	      ("<f12>" . anki-editor-cloze-region-auto-incr)
	      ("<f11>" . anki-editor-cloze-region-dont-incr)
	      ("<f10>" . anki-editor-reset-cloze-number)
	      ("<f9>"  . anki-editor-push-tree)
	      ("<f6>"  . anki-editor-insert-note))
    :hook (org-capture-after-finalize . anki-editor-reset-cloze-number) ; Reset cloze-number after each capture.
    :config
    (setq anki-editor-create-decks t ;; Allow anki-editor to create a new deck if it doesn't exist
	  anki-editor-org-tags-as-anki-tags t)

    (defun anki-editor-cloze-region-auto-incr (&optional arg)
      "Cloze region without hint and increase card number."
      (interactive)
      (anki-editor-cloze-region my-anki-editor-cloze-number "")
      (setq my-anki-editor-cloze-number (1+ my-anki-editor-cloze-number))
      (forward-sexp))
    (defun anki-editor-cloze-region-dont-incr (&optional arg)
      "Cloze region without hint using the previous card number."
      (interactive)
      (anki-editor-cloze-region (1- my-anki-editor-cloze-number) "")
      (forward-sexp))
    (defun anki-editor-reset-cloze-number (&optional arg)
      "Reset cloze number to ARG or 1"
      (interactive)
      (setq my-anki-editor-cloze-number (or arg 1)))
    (defun anki-editor-push-tree ()
      "Push all notes under a tree."
      (interactive)
      (anki-editor-push-notes '(4))
      (anki-editor-reset-cloze-number))
    ;; Initialize
    (anki-editor-reset-cloze-number)
    )

  (setq org-my-anki-file "/home/nati/Document/org/meta/anki.org")
  (defun make-orgcapture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "org-capture") (window-system . x)))
    (select-frame-by-name "org-capture")
    (counsel-org-capture)
    (delete-other-windows)
    )
  #+end_src
* habit
#+begin_src emacs-lisp
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit t)
    (setq org-log-into-drawer t)
    (setq org-habit-show-habits-only-for-today nil)
    (setq org-agenda-repeating-timestamp-show-all nil)
    (use-package org-habit-stats
	)
    (define-key org-mode-map (kbd "C-c h") 'org-habit-stats-view-habit-at-point)
    (define-key org-agenda-mode-map (kbd "H") 'org-habit-stats-view-habit-at-point-agenda)



#+end_src
* gptel
#+begin_src emacs-lisp
  (use-package gptel
    
    :config
    (setq gptel-api-key "AIzaSyAPRhQmrm6RdUfCKTk42bq0bkCQQJ25SKY"))
    ;; (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
    ;; (add-hook 'gptel-post-response-functions 'gptel-end-of-response))

  ;; (gptel-make-gemini "Gemini"
  ;;   ;; :key "AIzaSyDIjFBHz0kIx9N--EzFX5Qxv5af5e_Xz1M"
  ;;   :key "AIzaSyAPRhQmrm6RdUfCKTk42bq0bkCQQJ25SKY")
  (setq-default gptel-model "gemini-1.5-pro" ;Pick your default model
	      gptel-backend (gptel-make-gemini "Gemini" :host "generativelanguage.googleapis.com" :protocol "https" :endpoint "/v1beta/models" :stream t :key #'gptel-api-key :models '("gemini-pro" "gemini-pro-vision" "gemini-1.5-flash" "gemini-1.5-pro")))
  (setq gptel-log-level 'debug)
  (setq gptel--debug t)
#+end_src
* origami
#+begin_src emacs-lisp
  ;; (use-package origami			;
  ;;   
  ;;   :bind (:map origami-mode-map
  ;; 	  ("C-c C-f" . origami-forward-fold-same-level)
  ;; 	  ("C-c C-b" . origami-backward-fold-same-level)
  ;; 	  ("C-c C-n" . origami-forward-fold)
  ;; 	  ("C-c C-p" . origami-previous-fold)
  ;; 	  ("C-c C-f" . origami-toggle-node))
  ;;   :config (
  ;; 	   (c-mode . origami-mode)
  ;; 	   (c++-mode . origami-mode)
  ;; 	   (java-mode . origami-mode)
  ;; 	   (clojure-mode . origami-mode)
  ;; 	   (js2-mode . origami-mode)
  ;; 	   (typescript-mode . origami-mode)
  ;; 	   (python-mode . origami-mode)
  ;; 	   (emacs-lisp-mode . origami-mode)
  ;; 	   ))

#+end_src
* others
#+begin_src emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-habit-alert-face ((t nil)))
 '(org-habit-alert-future-face ((t nil)))
 '(org-habit-clear-future-face ((t nil)))
 '(org-habit-done-face ((t (:background "green" :foreground "black"))))
 '(org-habit-done-future-face ((t (:background "forest green"))))
 '(org-habit-overdue-face ((t nil)))
 '(org-habit-overdue-future-face ((t nil)))
 '(org-habit-ready-face ((t nil)))
 '(org-habit-ready-future-face ((t nil))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files
   '("~/Document/org/work/upwork/eloi/usb/usb_today.org" "/home/nati/Document/org/me/habits/drug.org" "/home/nati/Document/org/work/upwork/moni_melman/moni_melman_today.org" "/home/nati/Document/org/work/upwork/mike/new/cs/annot_bib/annot_bib.org" "/home/nati/Document/org/me/habits/bulk/food_today.org" "/home/nati/Document/org/me/habits/bulk/bulk_today.org" "/home/nati/Document/org/work/upwork/ange/resource/project2/project2_today.org" "/home/nati/Document/org/work/upwork/pape_obf/obf_today.org" "/home/nati/Document/org/me/music/music_today.org" "/home/nati/Document/org/me/books/books_today.org" "/home/nati/Document/org/work/upwork/mike/mike_today.org" "/home/nati/Document/org/work/upwork/deob/deob_today.org" "/home/nati/Document/org/work/upwork/prem/shineloop/shineloop_today.org" "/home/nati/Document/org/baskets/web_log.org" "/home/nati/Document/org/work/upwork/mike/new/policy/annotation1/annotation.org" "/home/nati/Document/org/work/upwork/ange/ange_today.org" "/home/nati/Document/org/work/upwork/mike/new/policy/policy_today.org" "/home/nati/Document/org/work/upwork/mike/new/research/research_today.org" "/home/nati/Document/org/work/upwork/mike/lab/lab_today.org" "/home/nati/Document/org/work/hs/hs_today.org" "/home/nati/Document/org/meta/meta.org" "/home/nati/Document/org/super/langs/lua/lua_today.org" "/home/nati/Document/org/super/langs/python/sqlalchemy/sqlalchemy_today.org" "/home/nati/Document/org/super/langs/python/manim/manim_today.org" "/home/nati/Document/org/super/langs/python/fastapi/fastapi_today.org" "/home/nati/Document/org/super/langs/python/python_today.org" "/home/nati/Document/org/super/emacs/emacs_today.org" "/home/nati/Document/org/super/aweseomevm/awesomevm_today.org" "/home/nati/Document/org/work/hs/topics/advanced_figma_to_code/advanced_figma_to_code_today.org" "/home/nati/Document/org/work/hs/topics/gulpjs/gulpjs_today.org" "/home/nati/Document/org/work/hs/topics/understanding_of_state_management/understanding_of_state_managment_today.org" "/home/nati/Document/org/me/habits/habits.org" "/home/nati/Document/org/me/habits/habits_track.org" "/home/nati/Document/org/super/langs/js/gulpjs/gulpjs_today.org" "/home/nati/Document/org/today.org" "/home/nati/Document/org/work/upwork/prem/loqui/loqui_today.org" "/home/nati/Document/org/work/upwork/prem/prem_today.org" "/home/nati/Document/org/baskets/todo.org"))
 '(org-priority-faces '((65 . "tomato") (66 . "yellow") (67 . "blue")))
 '(package-selected-packages
   '(all-the-icons doom-themes typescript-mode tree-sitter-langs dap-mode dap origami pyvenv zenburn-theme yasnippet which-key undo-fu try sudo-edit rainbow-delimiters projectile powerline pdf-tools org-superstar org-noter org-habit-stats nov magit lsp-ui lsp-treemacs lsp-pyright lsp-ivy imenu-list gptel flycheck djvu counsel company-box anki-editor)))

#+end_src
